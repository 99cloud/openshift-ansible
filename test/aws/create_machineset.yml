---
- name: save machineset to a file
  copy:
    content: "{{ item | to_yaml }}"
    dest: "{{ mktemp.stdout }}/machineset.yaml"

- name: get existing machineset name
  yedit:
    state: list
    src: "{{ mktemp.stdout }}/machineset.yaml"
    key: "metadata.name"
  register: machineset_name

- name: edit machineset name
  yedit:
    src: "{{ mktemp.stdout }}/machineset.yaml"
    separator: '#'
    state: present
    edits:
    - key: metadata#name
      value: "{{ machineset_name.result }}-centos"
    - key: spec#selector#matchLabels#sigs.k8s.io/cluster-api-machineset
      value: "{{ machineset_name.result }}-centos"
    - key: spec#template#metadata#labels#sigs.k8s.io/cluster-api-machineset
      value: "{{ machineset_name.result }}-centos"
    - key: spec#template#metadata#labels#sigs.k8s.io/cluster-api-machineset
      value: "{{ machineset_name.result }}-centos"
    - key: spec#template#spec#providerSpec#value#keyName
      value: "{{ openshift_aws_scaleup_key }}"
    - key: spec#template#spec#providerSpec#value#ami#id
      value: "{{ openshift_aws_scaleup_ami }}"

- name: import machinespec
  oc_obj:
    state: present
    namespace: "openshift-machine-api"
    kind: machineset
    name: "{{ machineset_name.result }}-centos"
    kubeconfig: "{{ kubeconfig_path }}"
    files:
    - "{{ mktemp.stdout }}/machineset.yaml"

- name: wait for machine to be created
  oc_obj:
    state: list
    kind: machines.machine.openshift.io
    namespace: openshift-machine-api
    selector: "sigs.k8s.io/cluster-api-machineset={{ machineset_name.result }}-centos"
    kubeconfig: "{{ kubeconfig_path }}"
  register: new_machine
  retries: 36
  delay: 5
  until:
  - "'results' in new_machine"
  - "'results' in new_machine.results"
  - "new_machine.results.results | length > 0"
  - "'items' in new_machine.results.results[0]"
  - "new_machine.results.results[0]['items'] | length > 0"
  - "'status' in new_machine.results.results[0]['items'][0]"
  - "'providerStatus' in new_machine.results.results[0]['items'][0]['status']"
  - "'instanceState' in new_machine.results.results[0]['items'][0]['status']['providerStatus']"
  - "new_machine.results.results[0]['items'][0]['status']['providerStatus']['instanceState'] == 'running'"

- name: add machine to the inventory
  add_host:
    name: "{{ new_machine.results.results[0]['items'][0].status.addresses | selectattr('type', 'match', '^InternalIP$') | map(attribute='address') | first }}"
    node_name: "{{ new_machine.results.results[0]['items'][0].status.addresses | selectattr('type', 'match', '^InternalDNS$') | map(attribute='address') | first }}"
    groups: new_workers
    ansible_ssh_common_args: '-o ProxyCommand="ssh -o IdentityFile="/opt/app-root/src/.ssh/id_rsa" -o StrictHostKeyChecking=no -W %h:%p -q core@{{ master_external_dns }}"'
